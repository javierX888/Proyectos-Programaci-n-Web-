-- Conectar a Usuario Rentastay
CONNECT rentastay/123456@ORCLCDB;
-- Tabla USERS
CREATE TABLE USERS (
    USER_ID NUMBER CONSTRAINT PERSON_PK PRIMARY KEY,
    USERNAME VARCHAR2(50) NOT NULL UNIQUE,
    FIRST_NAME VARCHAR2(25),
    LAST_NAME VARCHAR2(25),
    EMAIL VARCHAR2(50) NOT NULL UNIQUE,
    PHONE_NO VARCHAR2(20),
    PASSWORD VARCHAR2(255) NOT NULL,
    BANK_ACC_NO VARCHAR2(35),
    CREDIT_CARD_NO VARCHAR2(16),
    PROFILE_PIC VARCHAR2(512),
    JOIN_DATE DATE,
    IS_HOST NUMBER,
    POINTS NUMBER(6,0),
    RUT VARCHAR2(12) UNIQUE
);

-- Secuencia para USER_ID
CREATE SEQUENCE USER_ID_SEQ START WITH 1 INCREMENT BY 1;

-- Tabla REGIONS
CREATE TABLE REGIONS (
    REGION_ID NUMBER PRIMARY KEY,
    REGION_NAME VARCHAR2(100) NOT NULL
);

-- Secuencia para REGION_ID
CREATE SEQUENCE REGION_ID_SEQ START WITH 1 INCREMENT BY 1;

-- Tabla COMUNAS
CREATE TABLE COMUNAS (
    COMUNA_ID NUMBER CONSTRAINT COMUNA_PK PRIMARY KEY,
    COMUNA_NAME VARCHAR2(60) NOT NULL,
    REGION_ID NUMBER NOT NULL,
    CONSTRAINT COMUNA_REGION_FK FOREIGN KEY(REGION_ID) REFERENCES REGIONS(REGION_ID)
);

-- Secuencia para COMUNA_ID
CREATE SEQUENCE COMUNA_ID_SEQ START WITH 1 INCREMENT BY 1;

-- Tabla ADDRESSES
CREATE TABLE ADDRESSES (
    ADDRESS_ID NUMBER CONSTRAINT ADDRESS_PK PRIMARY KEY,
    STREET VARCHAR2(50) NOT NULL,
    POST_CODE VARCHAR2(20) NOT NULL,
    COMUNA_ID NUMBER NOT NULL,
    CONSTRAINT ADDRESS_COMUNA_FK FOREIGN KEY(COMUNA_ID) REFERENCES COMUNAS(COMUNA_ID)
);

-- Secuencia para ADDRESS_ID
CREATE SEQUENCE ADDRESS_ID_SEQ START WITH 1 INCREMENT BY 1;

-- Tabla PROPERTIES
CREATE TABLE PROPERTIES (
    PROPERTY_ID NUMBER CONSTRAINT PROPERTY_PK PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    ADDRESS_ID NUMBER NOT NULL UNIQUE,
    PROPERTY_NAME VARCHAR2(20),
    PROPERTY_NO VARCHAR2(30) NOT NULL,
    DESCRIPTION VARCHAR2(512),
    FEATURES VARCHAR2(512),
    CONSTRAINT PROPERTY_OWNER_FK FOREIGN KEY(USER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT PROPERTY_ADDRESS_FK FOREIGN KEY(ADDRESS_ID) REFERENCES ADDRESSES(ADDRESS_ID)
);

-- Secuencia para PROPERTY_ID
CREATE SEQUENCE PROPERTY_ID_SEQ START WITH 1 INCREMENT BY 1;

-- Tabla ROOMS
CREATE TABLE ROOMS (
    PROPERTY_ID NUMBER NOT NULL,
    ROOM_NO NUMBER NOT NULL,
    MAX_CAPACITY NUMBER,
    DESCRIPTION VARCHAR2(255),
    PRICE NUMBER NOT NULL,
    OFFER_PCT NUMBER,
    FEATURES VARCHAR2(512),
    CONSTRAINT ROOM_PROPERTY_FK FOREIGN KEY(PROPERTY_ID) REFERENCES PROPERTIES(PROPERTY_ID),
    CONSTRAINT ROOM_PK PRIMARY KEY(PROPERTY_ID, ROOM_NO)
);

-- Tabla PROPERTY_PHOTOS_PATH
CREATE TABLE PROPERTY_PHOTOS_PATH (
    PROPERTY_ID NUMBER NOT NULL,
    PATH VARCHAR2(255) NOT NULL UNIQUE,
    CONSTRAINT PROPERTY_PHOTOS_PATH_FK FOREIGN KEY (PROPERTY_ID) REFERENCES PROPERTIES(PROPERTY_ID)
);

-- Tabla ROOM_PHOTOS_PATH
CREATE TABLE ROOM_PHOTOS_PATH (
    PROPERTY_ID NUMBER NOT NULL,
    ROOM_NO NUMBER NOT NULL,
    PATH VARCHAR2(255) NOT NULL UNIQUE,
    CONSTRAINT ROOM_PHOTOS_PATH_FK FOREIGN KEY(PROPERTY_ID, ROOM_NO) REFERENCES ROOMS(PROPERTY_ID, ROOM_NO)
);

-- Tabla PAYMENTS
CREATE TABLE PAYMENTS (
    TRANSACTION_ID VARCHAR2(50) CONSTRAINT PAYMENT_PK PRIMARY KEY,
    TRANSACTION_DATE DATE DEFAULT SYSDATE NOT NULL,
    AMOUNT NUMBER NOT NULL,
    PAYMENT_METHOD VARCHAR2(30)
);

-- Tabla RENTS
CREATE TABLE RENTS (
    RENT_ID NUMBER CONSTRAINT RENT_PK PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    PROPERTY_ID NUMBER NOT NULL,
    ROOM_NO NUMBER NOT NULL,
    TRANSACTION_ID VARCHAR2(50),
    PROPERTY_RATING NUMBER,
    PROPERTY_REVIEW VARCHAR2(255),
    OWNER_RATING NUMBER,
    OWNER_REVIEW VARCHAR2(255),
    REVIEW_DATE DATE,
    CHECKIN DATE NOT NULL,
    CHECKOUT DATE NOT NULL,
    CONSTRAINT RENT_USER_FK FOREIGN KEY(USER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT RENT_PAYMENT_FK FOREIGN KEY(TRANSACTION_ID) REFERENCES PAYMENTS(TRANSACTION_ID),
    CONSTRAINT RENT_ROOM_FK FOREIGN KEY(PROPERTY_ID, ROOM_NO) REFERENCES ROOMS(PROPERTY_ID, ROOM_NO)
);

-- Secuencia para RENT_ID
CREATE SEQUENCE RENT_ID_SEQ START WITH 1 INCREMENT BY 1;

-- Tabla DEPOSITS
CREATE TABLE DEPOSITS (
    USER_ID NUMBER,
    TRANSACTION_ID VARCHAR2(50) UNIQUE,
    BANK_ACC_NO VARCHAR2(35),
    CONSTRAINT DEPOSITS_USER_FK FOREIGN KEY(USER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT DEPOSITS_PAYMENTS_FK FOREIGN KEY(TRANSACTION_ID) REFERENCES PAYMENTS(TRANSACTION_ID)
);

-- Trigger para auto-incrementar USER_ID
CREATE OR REPLACE TRIGGER USER_ID_TRG
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
    SELECT USER_ID_SEQ.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
END;
/

-- Trigger para auto-incrementar REGION_ID
CREATE OR REPLACE TRIGGER REGION_ID_TRG
BEFORE INSERT ON REGIONS
FOR EACH ROW
BEGIN
    SELECT REGION_ID_SEQ.NEXTVAL INTO :NEW.REGION_ID FROM DUAL;
END;
/

-- Trigger para auto-incrementar COMUNA_ID
CREATE OR REPLACE TRIGGER COMUNA_ID_TRG
BEFORE INSERT ON COMUNAS
FOR EACH ROW
BEGIN
    SELECT COMUNA_ID_SEQ.NEXTVAL INTO :NEW.COMUNA_ID FROM DUAL;
END;
/

-- Trigger para auto-incrementar ADDRESS_ID
CREATE OR REPLACE TRIGGER ADDRESS_ID_TRG
BEFORE INSERT ON ADDRESSES
FOR EACH ROW
BEGIN
    SELECT ADDRESS_ID_SEQ.NEXTVAL INTO :NEW.ADDRESS_ID FROM DUAL;
END;
/

-- Trigger para auto-incrementar PROPERTY_ID
CREATE OR REPLACE TRIGGER PROPERTY_ID_TRG
BEFORE INSERT ON PROPERTIES
FOR EACH ROW
BEGIN
    SELECT PROPERTY_ID_SEQ.NEXTVAL INTO :NEW.PROPERTY_ID FROM DUAL;
END;
/

-- Trigger para auto-incrementar RENT_ID
CREATE OR REPLACE TRIGGER RENT_ID_TRG
BEFORE INSERT ON RENTS
FOR EACH ROW
BEGIN
    SELECT RENT_ID_SEQ.NEXTVAL INTO :NEW.RENT_ID FROM DUAL;
END;
/

COMMIT;