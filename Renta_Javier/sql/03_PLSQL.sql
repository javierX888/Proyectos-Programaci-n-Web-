-- Conectar a Usuario Rentastay
CONNECT rentastay/123456@ORCLCDB;
-- Configurar el delimitador
SET DEFINE OFF;
SET SERVEROUTPUT ON;

-- Función GET_MIN_PRICE
CREATE OR REPLACE FUNCTION GET_MIN_PRICE(PID IN NUMBER)
RETURN NUMBER IS 
    MIN_PRICE NUMBER;
BEGIN
    SELECT MIN(NVL(PRICE, 0)) INTO MIN_PRICE
    FROM ROOMS
    WHERE PROPERTY_ID = PID;
    
    RETURN MIN_PRICE;
END;
/

-- Función GET_MAX_PRICE
CREATE OR REPLACE FUNCTION GET_MAX_PRICE(PID IN NUMBER)
RETURN NUMBER IS 
    MAX_PRICE NUMBER;
BEGIN
    SELECT MAX(NVL(PRICE, 0)) INTO MAX_PRICE
    FROM ROOMS
    WHERE PROPERTY_ID = PID;
    
    RETURN MAX_PRICE;
END;
/

-- Función INSERT_PROPERTY_RETURN_PROPERTY_ID
CREATE OR REPLACE FUNCTION INSERT_PROPERTY_RETURN_PROPERTY_ID(USRID IN NUMBER, AID IN NUMBER, PNAME IN VARCHAR2, 
PNO IN VARCHAR2, DESCR IN VARCHAR2)
RETURN NUMBER IS
    PID NUMBER;
BEGIN
    INSERT INTO PROPERTIES(USER_ID,ADDRESS_ID,PROPERTY_NAME,PROPERTY_NO,DESCRIPTION) 
    VALUES(USRID, AID, PNAME, PNO, DESCR) RETURNING PROPERTY_ID INTO PID;
    
    RETURN PID;
END;
/

-- Función RETURN_ADDRESS_ID
CREATE OR REPLACE FUNCTION RETURN_ADDRESS_ID(STR IN VARCHAR2, PC IN VARCHAR2, CID IN NUMBER)
RETURN NUMBER IS
    AID NUMBER;
BEGIN
    INSERT INTO ADDRESSES(STREET, POST_CODE, COMUNA_ID) 
    VALUES(STR, PC, CID) RETURNING ADDRESS_ID INTO AID;
    
    RETURN AID;
END;
/

-- Función IS_ROOM_AVAILABLE
CREATE OR REPLACE FUNCTION IS_ROOM_AVAILABLE(PID IN NUMBER, RN IN NUMBER, CID IN VARCHAR2, COD IN VARCHAR2, G IN NUMBER)
RETURN CHAR IS
    CNT NUMBER;
    CAPACITY NUMBER;
BEGIN
    SELECT MAX_CAPACITY INTO CAPACITY
    FROM ROOMS
    WHERE PROPERTY_ID = PID
    AND ROOM_NO = RN;
    
    IF G <= CAPACITY THEN
        SELECT COUNT(ROOM_NO) INTO CNT
        FROM RENTS
        WHERE PROPERTY_ID = PID
        AND ROOM_NO = RN
        AND ((TO_DATE(CID, 'DD-MON-YYYY') BETWEEN CHECKIN AND CHECKOUT)
        OR (TO_DATE(COD, 'DD-MON-YYYY') BETWEEN CHECKIN AND CHECKOUT)
        OR (CHECKIN BETWEEN TO_DATE(CID, 'DD-MON-YYYY') AND TO_DATE(COD, 'DD-MON-YYYY')));
    
        IF CNT = 0 THEN
            RETURN 'Y';
        ELSE
            RETURN 'N';
        END IF;
    END IF;
    RETURN 'N';
END;
/

-- Trigger UPDATE_DEPOSITS
CREATE OR REPLACE TRIGGER UPDATE_DEPOSITS
FOR INSERT
ON RENTS
COMPOUND TRIGGER
    UID NUMBER;
    HOST_BANK_ACC_NO VARCHAR2(35);
    
    BEFORE EACH ROW IS
    BEGIN
        SELECT USER_ID INTO UID
        FROM PROPERTIES WHERE PROPERTY_ID = :NEW.PROPERTY_ID;
        
        SELECT BANK_ACC_NO INTO HOST_BANK_ACC_NO
        FROM USERS WHERE USER_ID = UID;
        
        IF HOST_BANK_ACC_NO IS NULL THEN
            RAISE_APPLICATION_ERROR(-20001, 'Transaction cant be completed. Owner doesnt have bank account no');
        END IF;
    END BEFORE EACH ROW;

    AFTER EACH ROW IS
    BEGIN
        INSERT INTO DEPOSITS
        VALUES(UID, :NEW.TRANSACTION_ID, HOST_BANK_ACC_NO);
    END AFTER EACH ROW;
END;
/

-- Trigger MAKE_HOST
CREATE OR REPLACE TRIGGER MAKE_HOST
AFTER INSERT
ON PROPERTIES
FOR EACH ROW
DECLARE
    ISHOST NUMBER(1);
BEGIN
    DBMS_OUTPUT.PUT_LINE('Make host triggered ' || :NEW.USER_ID);
    UPDATE USERS
    SET IS_HOST = 1
    WHERE USER_ID = :NEW.USER_ID;
    DBMS_OUTPUT.PUT_LINE('Host ADDED');
END;
/

-- Trigger REMOVE_HOST
CREATE OR REPLACE TRIGGER REMOVE_HOST
AFTER DELETE
ON PROPERTIES
FOR EACH ROW
DECLARE
    NO_OF_PROPERTIES NUMBER;
    PID NUMBER := 0;
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Remove host triggered');
    SELECT COUNT(PROPERTY_ID) INTO NO_OF_PROPERTIES
    FROM PROPERTIES
    WHERE USER_ID = :OLD.USER_ID;
    
    IF NO_OF_PROPERTIES = 1 THEN
        SELECT PROPERTY_ID INTO PID
        FROM PROPERTIES
        WHERE USER_ID = :OLD.USER_ID;
    END IF;
    
    IF NO_OF_PROPERTIES = 1 AND PID = :OLD.PROPERTY_ID THEN
        UPDATE USERS
        SET IS_HOST = 0
        WHERE USER_ID = :OLD.USER_ID;
        DBMS_OUTPUT.PUT_LINE('Host removed');
    END IF;
    COMMIT;
END;
/

-- Trigger DEL_DEPOSITS
CREATE OR REPLACE TRIGGER DEL_DEPOSITS
BEFORE DELETE
ON DEPOSITS
FOR EACH ROW
DECLARE
BEGIN
    DELETE FROM PAYMENTS WHERE TRANSACTION_ID=:OLD.TRANSACTION_ID;
    DBMS_OUTPUT.PUT_LINE('DEPOSITS DELETED');
END;
/

-- Trigger DEL_ROOMS
CREATE OR REPLACE TRIGGER DEL_ROOMS
BEFORE DELETE
ON ROOMS
FOR EACH ROW
DECLARE
BEGIN
    DELETE FROM ROOM_PHOTOS_PATH WHERE ROOM_NO=:OLD.ROOM_NO AND PROPERTY_ID=:OLD.PROPERTY_ID;
    DELETE FROM RENTS WHERE ROOM_NO=:OLD.ROOM_NO AND PROPERTY_ID=:OLD.PROPERTY_ID;
    DBMS_OUTPUT.PUT_LINE('ROOM DELETED');
END;
/

-- Trigger DEL_PROPERTIES
CREATE OR REPLACE TRIGGER DEL_PROPERTIES
BEFORE DELETE
ON PROPERTIES
FOR EACH ROW
DECLARE
BEGIN
    DELETE FROM PROPERTY_PHOTOS_PATH WHERE PROPERTY_ID=:OLD.PROPERTY_ID;
    DELETE FROM ROOMS WHERE PROPERTY_ID=:OLD.PROPERTY_ID;
    DELETE FROM RENTS WHERE PROPERTY_ID=:OLD.PROPERTY_ID;
    DBMS_OUTPUT.PUT_LINE('PROPERTY DELETED');
END;
/

-- Trigger DEL_USERS
CREATE OR REPLACE TRIGGER DEL_USERS
BEFORE DELETE
ON USERS
FOR EACH ROW
DECLARE
BEGIN
    DELETE FROM PROPERTIES WHERE USER_ID=:OLD.USER_ID;
    DELETE FROM RENTS WHERE USER_ID=:OLD.USER_ID;
    DELETE FROM DEPOSITS WHERE USER_ID=:OLD.USER_ID;
    DBMS_OUTPUT.PUT_LINE('USER DELETED');
END;
/

-- Función GET_LAST_DATE_PROPERTY
CREATE OR REPLACE FUNCTION GET_LAST_DATE_PROPERTY(PID IN NUMBER)
RETURN BOOLEAN IS 
    LAST_DATE DATE;
BEGIN
    SELECT MAX(CHECKOUT) INTO LAST_DATE
    FROM RENTS
    WHERE PROPERTY_ID = PID;
    IF LAST_DATE>=SYSDATE THEN
        DBMS_OUTPUT.PUT_LINE('Rent Exist');
        RETURN TRUE;
    ELSE
        DBMS_OUTPUT.PUT_LINE('Rent not exist');
        RETURN FALSE;
    END IF;
END;
/

-- Función GET_LAST_DATE_ROOM
CREATE OR REPLACE FUNCTION GET_LAST_DATE_ROOM(PID IN NUMBER, RID IN NUMBER)
RETURN BOOLEAN IS 
    LAST_DATE DATE; 
BEGIN
    SELECT MAX(CHECKOUT) INTO LAST_DATE
    FROM RENTS
    WHERE PROPERTY_ID = PID AND ROOM_NO = RID;
    IF LAST_DATE>=SYSDATE THEN
        DBMS_OUTPUT.PUT_LINE('Rent Exist');
        RETURN TRUE;
    ELSE
        DBMS_OUTPUT.PUT_LINE('Rent not exist');
        RETURN FALSE;
    END IF;
END;
/

-- Función GET_LAST_DATE_USER
CREATE OR REPLACE FUNCTION GET_LAST_DATE_USER(UID IN NUMBER)
RETURN BOOLEAN IS 
    LAST_DATE DATE; 
BEGIN
    SELECT MAX(CHECKOUT) INTO LAST_DATE
    FROM RENTS
    WHERE USER_ID = UID;
    IF LAST_DATE>=SYSDATE THEN
        DBMS_OUTPUT.PUT_LINE('Rent Exist');
        RETURN TRUE;
    ELSE
        DBMS_OUTPUT.PUT_LINE('Rent not exist');
        RETURN FALSE;
    END IF;
END;
/

-- Mostrar mensajes de éxito
BEGIN
    DBMS_OUTPUT.PUT_LINE('Todas las funciones y triggers han sido creados exitosamente.');
END;
/